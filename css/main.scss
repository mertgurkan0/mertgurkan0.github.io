/* Button details are from -> https://codepen.io/giana */
/* I slightly modified their coloring and animations */

/*
  https://developer.mozilla.org/en/docs/Web/CSS/box-shadow
  box-shadow: [inset?] [top] [left] [blur] [size] [color];

  Tips:
    - We're setting all the blurs to 0 since we want a solid fill.
    - Add the inset keyword so the box-shadow is on the inside of the element
    - Animating the inset shadow on hover looks like the element is filling in from whatever side you specify ([top] and [left] accept negative values to become [bottom] and [right])
    - Multiple shadows can be stacked
    - If you're animating multiple shadows, be sure to keep the same number of shadows so the animation is smooth. Otherwise, you'll get something choppy.
*/

// Animate the size, inside
.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

// Animate the size, outside
.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em rgba(#fff,0);
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

// Defining same stuff for the "pulse" with alternative color
.pulse2:hover, 
.pulse2:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em rgba(#fff,0);
}


// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
  box-shadow: 
    inset -3.5em 0 0 0 var(--hover),
    inset 3.5em 0 0 0 var(--hover);  
}

// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {  
  box-shadow: 
    0.3em 0.3em 0 0 var(--color),
    inset 0.3em 0.3em 0 0 var(--color);
  
  &:hover,
  &:focus {
    box-shadow: 
      0 0 0 0 var(--hover),
      inset 6em 3.5em 0 0 var(--hover);
  }
}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (
  fill: #a972cb,
  pulse: #a972cb, 
  close: #ff7f82, 
  raise: #ffa260, 
  up: #e9780f, 
  slide: #8fc866, 
  offset: #570a7a,
  pulse2: #dd7d10
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, -30deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {  
  color: var(--color);
  transition: 0.5s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: #470466;
  }
}

//=== Pen styling, ignore
body {
    /*
  color: #fff;
  background: hsl(227, 10%, 10%);
  font: 300 1em 'Fira Sans', sans-serif;
  
  // Center everything ever
  justify-content: center;
  align-content: center;
  align-items: center;
  text-align: center;
  min-height: 100vh;
  display: flex;
    */
}

// Basic button styles
button {
  background: none;
  border: 2px solid;
  font: inherit;
  line-height: 1;
  margin: 0.5em;
  padding: 1em 2em;
  margin-left: 30px;
  border-radius: 4px;

  //size options
  width: 120px;
  /*
  @media screen and (max-width: 991px){
    width: 70px;
    margin-left: 5px;
    font-size: 9px;
    line-height: 12px;
  }
  */
  @media screen and (max-width: 767px){
    margin-left: 5px;
  }
  @media screen and (max-width: 670px){
    width: 110px;
    margin-left: 5px;
    font-size: 14px;
    line-height: 12px;
  }
}

h1 { font-weight: 400; }

code { 
  color: #e4cb58;
  font: inherit;
}

// Stuff I added
.center-content {
    text-align: center;
}

.row{
    &.bio{
        margin-top: 30px;
        margin-left: 15px;
    }
}

.text{
    font-family: 'Lato';
    &.title{
        font-size: 36px;
        font-weight: 800;
    }
    &.description{
        font-size: 20px;
        font-weight: 200;
        @media screen and (max-width: 991px){
            font-size: 18px;
        }
    }
    &.bio-title{
        font-size: 18px;
        font-weight: 600;
        margin-left: 24px;
        margin-top: 12px;
    }
    &.bio-text{
        font-size: 15px;
        font-weight: 500;
        margin-left: 24px;
    }
}

.img{
    &.profile{
        object-fit: cover;
        max-width: 400px;
        width: 100%;
        height: 250px;
        border-radius: 8%;
    }
}

.bio-list{
    list-style-type: none;
    margin-left: -8px;
}

.fas{
    &.fa-map-marker-alt:hover{
        color:#ff0000;
    }
}

.fab{
    &.fa-twitter:hover{
        color: #00acee;
    }
    &.fa-linkedin:hover{
        color: #0077b5;
    }
    &.fa-github:hover{
        color: #6cc644;
    }
}

.li{
    font-family: 'Lato';
    cursor: pointer;
    &.location:hover{
        color:#ff0000;
        cursor: default;
    }
    &.twitter:hover{
        color: #00acee;
    }
    &.linkedin:hover{
        color: #0077b5;
    }
    &.github:hover{
        color: #6cc644;
    }
}

a, a:hover, a:visited, a:active {
    color: inherit;
    text-decoration: none;
}

.container{
    &.bio{
      @media screen and (max-width: 991px){
          text-align: center;
      }  
    }
}

.navbar-brand{
    font-family: 'MonteCarlo', cursive;
    font-weight: 600;
    font-size: 24px;
    @media screen and (max-width: 670px){
      font-size: 16px;
      margin-left: -12px;
    }
}
